AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31


##################################################################
### Globals for Function
##################################################################

Globals:

  Function:
    MemorySize: 512
    Timeout: 60
    Runtime: python3.8
    Environment:
      Variables:
        DDB_TABLE_NAME: !Sub ${AWS::StackName}-client-table
        WEB_HOOK_FUNCTION_NAME: !Sub ${AWS::StackName}-webhook
        API_GATEWAY_ROOT: !Join [ '', [ !Ref WebSocketDevOpsBotDemo, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com'] ]
        API_GATEWAY_STAGE: !Ref 'Stage'
        AWS_ACCOUNT_ID: !Ref AWS::AccountId

# ----------------------------------------------
# Resources: Lambda Layers
# ----------------------------------------------

Resources:

  LayerVersionDevOpsBot:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}
      Description: Dependencies for DevOps Bot Server
      ContentUri:
        ./lambda-layers/core
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Delete

# ----------------------------------------------
# Resources: Functions
# ----------------------------------------------

  FunctionWebsocket:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-websocket
      CodeUri: ./src
      Handler: main_websocket.lambda_handler
      Role: !GetAtt RoleFunction.Arn
      Layers:
        - !Ref LayerVersionDevOpsBot
      Timeout: 60

  FunctionWebhook:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-webhook
      CodeUri: ./src
      Handler: main_webhook.lambda_handler
      Role: !GetAtt RoleFunction.Arn
      Layers:
        - !Ref LayerVersionDevOpsBot
      Timeout: 60
      Events:
        SNSSubscription:
          Type: SNS
          Properties:
            Topic: !Ref SnsTopic

  RoleFunction:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-role-lambda
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: WebSocketPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - execute-api:*
                  - apigateway:PUT
                  - apigateway:POST
                  - apigateway:GET
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

# ----------------------------------------------
# Resources: DynamoDB
# ----------------------------------------------

  DynamoDBTableWebsocket:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: client-id
          AttributeType: 'S'
      KeySchema:
        - AttributeName: client-id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AWS::StackName}-client-table
      TimeToLiveSpecification:
        AttributeName: timestamp
        Enabled: True

# ----------------------------------------------
# Resources: SNS
# ----------------------------------------------

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${AWS::StackName}-sns-topic
      TopicName: !Sub ${AWS::StackName}-sns-topic

# ----------------------------------------------
# Resources: API Gateway
# ----------------------------------------------

  WebSocketDevOpsBotDemo:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketDevOpsBotDemo
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketDevOpsBotDemo
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-websocket/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketDevOpsBotDemo
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketDevOpsBotDemo
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-websocket/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketDevOpsBotDemo
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultInteg

  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketDevOpsBotDemo
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-websocket/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DefaultRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketDevOpsBotDemo

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: default
      Description: Default Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketDevOpsBotDemo

  PermissionWebsocket:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketDevOpsBotDemo
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FunctionWebsocket
      Principal: apigateway.amazonaws.com